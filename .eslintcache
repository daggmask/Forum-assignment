[{"C:\\Programming_school\\forum-assignment\\src\\index.js":"1","C:\\Programming_school\\forum-assignment\\src\\App.js":"2","C:\\Programming_school\\forum-assignment\\src\\context\\userContext.js":"3","C:\\Programming_school\\forum-assignment\\src\\pages\\header.js":"4","C:\\Programming_school\\forum-assignment\\src\\pages\\home.js":"5","C:\\Programming_school\\forum-assignment\\src\\users\\loginModal.js":"6","C:\\Programming_school\\forum-assignment\\src\\posts\\postList.js":"7","C:\\Programming_school\\forum-assignment\\src\\posts\\postView.js":"8","C:\\Programming_school\\forum-assignment\\src\\posts\\postCreation.js":"9","C:\\Programming_school\\forum-assignment\\src\\context\\postContext.js":"10","C:\\Programming_school\\forum-assignment\\src\\posts\\postFilterButton.js":"11","C:\\Programming_school\\forum-assignment\\src\\users\\userCreation.js":"12","C:\\Programming_school\\forum-assignment\\src\\helpers\\helpers.js":"13","C:\\Programming_school\\forum-assignment\\src\\posts\\postPage.js":"14","C:\\Programming_school\\forum-assignment\\src\\posts\\comments.js":"15","C:\\Programming_school\\forum-assignment\\src\\posts\\commentField.js":"16","C:\\Programming_school\\forum-assignment\\src\\admin\\adminPage.js":"17","C:\\Programming_school\\forum-assignment\\src\\admin\\usersList.js":"18","C:\\Programming_school\\forum-assignment\\src\\admin\\userDetail.js":"19"},{"size":237,"mtime":1608401420880,"results":"20","hashOfConfig":"21"},{"size":994,"mtime":1609750585488,"results":"22","hashOfConfig":"21"},{"size":537,"mtime":1610085608582,"results":"23","hashOfConfig":"21"},{"size":2120,"mtime":1610031230638,"results":"24","hashOfConfig":"21"},{"size":212,"mtime":1608401420880,"results":"25","hashOfConfig":"21"},{"size":3934,"mtime":1610078428443,"results":"26","hashOfConfig":"21"},{"size":2382,"mtime":1610087389257,"results":"27","hashOfConfig":"21"},{"size":1316,"mtime":1610087241445,"results":"28","hashOfConfig":"21"},{"size":4805,"mtime":1610083992950,"results":"29","hashOfConfig":"21"},{"size":495,"mtime":1609750871334,"results":"30","hashOfConfig":"21"},{"size":929,"mtime":1609924423899,"results":"31","hashOfConfig":"21"},{"size":3494,"mtime":1609756477947,"results":"32","hashOfConfig":"21"},{"size":1566,"mtime":1610083980466,"results":"33","hashOfConfig":"21"},{"size":5491,"mtime":1610087727795,"results":"34","hashOfConfig":"21"},{"size":1034,"mtime":1610085170930,"results":"35","hashOfConfig":"21"},{"size":1065,"mtime":1610069969263,"results":"36","hashOfConfig":"21"},{"size":1612,"mtime":1610076913910,"results":"37","hashOfConfig":"21"},{"size":385,"mtime":1610076927208,"results":"38","hashOfConfig":"21"},{"size":3492,"mtime":1610077056156,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"jlut5y",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},"C:\\Programming_school\\forum-assignment\\src\\index.js",[],["86","87"],"C:\\Programming_school\\forum-assignment\\src\\App.js",[],"C:\\Programming_school\\forum-assignment\\src\\context\\userContext.js",[],"C:\\Programming_school\\forum-assignment\\src\\pages\\header.js",["88"],"import React, { useState, useContext } from \"react\";\r\nimport { withRouter, useHistory } from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  NavbarBrand,\r\n  NavItem,\r\n  NavLink,\r\n  Nav,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport LoginModal from '../users/loginModal'\r\nimport PostCreation from '../posts/postCreation'\r\nimport AdminPanel from '../admin/adminPage'\r\nimport {UserContext} from \"../context/userContext\"\r\nimport AdminPage from \"../admin/adminPage\";\r\n\r\n\r\nconst ForumHeader = (props) => {\r\n  const {user} = useContext(UserContext)\r\n\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  let history = useHistory();\r\n\r\n  const goToHomePage = () => {\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const toggleModal = () => {\r\n    setModalIsOpen(!modalIsOpen);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar className=\"light-grey-background mb-3\" expand=\"lg\">\r\n        <NavbarBrand className=\"text-light pointer\" onClick={goToHomePage}>\r\n          <h3 className=\"my-auto ml-1 p-2\">\r\n            Forum\r\n            <span className=\"orange-background forum-white borderRadius ml-1\">\r\n              Hub\r\n            </span>\r\n          </h3>\r\n        </NavbarBrand>\r\n\r\n          <Nav navbar>\r\n            <NavItem>\r\n              <NavLink className=\"forum-grey text-light pointer\" onClick={goToHomePage}>\r\n                <Button className=\"forum-button\">Home</Button>\r\n              </NavLink>\r\n            </NavItem>\r\n            <>\r\n              <NavItem className=\"forum-grey\" onClick={() => toggleModal}>\r\n                <NavLink className=\"forum-grey pointer\">\r\n                  <LoginModal/>\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink>\r\n                  <PostCreation/>\r\n                </NavLink>\r\n              </NavItem>\r\n              {user && user.userRole === \"admin\" ?\r\n              <NavItem>\r\n                <NavLink>\r\n                  <AdminPage/>\r\n                </NavLink>\r\n              </NavItem>\r\n              : null}\r\n\r\n            </>\r\n          </Nav>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(ForumHeader);\r\n","C:\\Programming_school\\forum-assignment\\src\\pages\\home.js",["89"],"import { Button } from 'reactstrap'\r\nimport React from 'react'\r\nimport PostList from '../posts/postList'\r\n\r\nconst Home = () => {\r\n\r\n  return(\r\n    <div>\r\n      <PostList/>\r\n    </div>\r\n  )\r\n}\r\nexport default Home","C:\\Programming_school\\forum-assignment\\src\\users\\loginModal.js",["90"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport {UserContext} from \"../context/userContext\"\r\nimport UserCreation from './userCreation'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst LoginModal = () => {\r\n  const {user, setUser} = useContext(UserContext)\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessageShown, setErrorMessageShown] = useState(false);\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n  let history = useHistory();\r\n\r\n  const doLogin = async () => {\r\n    const credentials = {username: username, password: password}\r\n    await fetch(\"/api/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    })\r\n      .then((res) => res.json())\r\n      .then( async (data) => data ? setUser(data)\r\n         & setModal(false)\r\n         & setErrorMessageShown(false)\r\n         & history.push(\"/\")\r\n         : setErrorMessageShown(true))\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  const doLogout = async() => {\r\n    await fetch(\"/api/login\",{\r\n      method: \"DELETE\"\r\n    })\r\n      .then((res) => res.json())\r\n      .then(() => setUser(null))\r\n      .then(() => history.push(\"/\"))\r\n      .catch((error) => console.error(error))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {user ? \r\n      <Button className=\"forum-button\" onClick={() => doLogout()}>\r\n        Logout\r\n      </Button>\r\n      :<Button className=\"forum-button\" onClick={toggle}>\r\n      Login\r\n    </Button>}\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader className=\"text-center mx-auto\">Login</ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 m-0\">\r\n              <Label\r\n                for=\"emailAddress\"\r\n                className=\"forum-dark-grey font-weight-bold col-12\"\r\n              >\r\n                Username\r\n              </Label>\r\n              <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input\"\r\n                type=\"email\"\r\n                placeholder=\"Username...\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              <Label\r\n             for=\"password\"\r\n              className=\"forum-dark-grey font-weight-bold col-12\"\r\n            >\r\n              Password\r\n            </Label>\r\n             <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input col-10 noBorder\"\r\n                type=\"password\"\r\n                placeholder=\"Password...\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              {errorMessageShown ? (\r\n                <div className=\"error-text mb-2 text-center font-weight-bold\">\r\n                  Wrong username or password{\" \"}\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <Button className=\"forum-button col-xs-8 col-sm-12 col-md-12 col-lg-12 font-weight-bold\" onClick={() => doLogin()}>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </Form>\r\n          <UserCreation doLogin={doLogin}/>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button className=\"forum-button\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginModal;\r\n","C:\\Programming_school\\forum-assignment\\src\\posts\\postList.js",["91","92"],"C:\\Programming_school\\forum-assignment\\src\\posts\\postView.js",[],"C:\\Programming_school\\forum-assignment\\src\\posts\\postCreation.js",[],"C:\\Programming_school\\forum-assignment\\src\\context\\postContext.js",[],"C:\\Programming_school\\forum-assignment\\src\\posts\\postFilterButton.js",[],"C:\\Programming_school\\forum-assignment\\src\\users\\userCreation.js",["93","94"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from \"reactstrap\";\r\n\r\nconst UserCreation = ({doLogin}) => {\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessageShown, setErrorMessageShown] = useState(false);\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const registerUser = async () => {\r\n    const credentials = {username: username, password: password, userRole: \"basicUser\"}\r\n    await fetch(\"/api/users\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    })\r\n      .then((res) => res.json()\r\n        & setModal(false)\r\n        & setErrorMessageShown(false)\r\n        & doLogin())\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <div className=\"text-center m-4\" onClick={toggle}>\r\n        <p className=\"font-italic mb-0\">Don't have an account?</p>\r\n        <p className=\"font-italic\">\r\n          {\" \"}\r\n          Register{\" \"}\r\n          <span className=\"text-primary click-text inline\">\r\n            <span>here</span>\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader className=\"text-center mx-auto\">Register</ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 m-0\">\r\n              <Label\r\n                for=\"emailAddress\"\r\n                className=\"forum-dark-grey font-weight-bold col-12\"\r\n              >\r\n                Username\r\n              </Label>\r\n              <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input\"\r\n                type=\"text\"\r\n                placeholder=\"Username...\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              <Label\r\n             for=\"password\"\r\n              className=\"forum-dark-grey font-weight-bold col-12\"\r\n            >\r\n              Lösenord\r\n            </Label>\r\n             <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input col-10 noBorder\"\r\n                type=\"password\"\r\n                placeholder=\"Password...\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              {errorMessageShown ? (\r\n                <div className=\"error-text mb-2 text-center font-weight-bold\">\r\n                  Invalid username or password{\" \"}\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <Button className=\"forum-button col-xs-8 col-sm-12 col-md-12 col-lg-12 font-weight-bold\" onClick={() => registerUser()}>\r\n                Register\r\n              </Button>\r\n            </FormGroup>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button className=\"forum-button\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default UserCreation","C:\\Programming_school\\forum-assignment\\src\\helpers\\helpers.js",[],"C:\\Programming_school\\forum-assignment\\src\\posts\\postPage.js",["95","96","97","98","99"],"C:\\Programming_school\\forum-assignment\\src\\posts\\comments.js",[],"C:\\Programming_school\\forum-assignment\\src\\posts\\commentField.js",[],"C:\\Programming_school\\forum-assignment\\src\\admin\\adminPage.js",["100"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Label, Form, FormGroup } from 'reactstrap';\r\nimport UserList from './usersList'\r\n\r\nconst AdminPage = () => {\r\n  const [searchData, setSearchData] = useState(\"\")\r\n  const [userList, setUserList] = useState([])\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const getUserList = async () => {\r\n    await fetch(\"/api/users/\" + searchData)\r\n      .then((res) => res.json())\r\n      .then((data) => setUserList(data) & console.log(data))\r\n      .catch((error) => console.error(error))\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <Button color=\"danger\" onClick={toggle}>Open Admin Panel</Button>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader className=\"mx-auto\">Admin Panel</ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup>\r\n              <Label className=\"mx-auto\" for=\"searchUsers\">\r\n                Search Users\r\n              </Label>\r\n              <Input type=\"text\" placeholder=\"Search user\" className=\"col-12\" name=\"searchUsers\" onChange={(e) => setSearchData(e.target.value)}/>\r\n              <Button className=\"mt-2 forum-button\" onClick={() => getUserList()} >Search</Button>\r\n            </FormGroup>\r\n          </Form>\r\n          <UserList userList={userList} getUserList={getUserList}/>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button className=\"forum-button\" onClick={toggle}>Close</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\nexport default AdminPage","C:\\Programming_school\\forum-assignment\\src\\admin\\usersList.js",["101","102","103"],"import React from 'react'\r\nimport { ListGroup, ListGroupItem, Badge, Button  } from 'reactstrap';\r\nimport UserDetail from './userDetail'\r\n\r\nconst UsersList = ({userList, getUserList}) => {\r\n\r\n  return(\r\n    <ListGroup>\r\n      {userList.map((user,i) => {\r\n        return(<UserDetail user={user} getUserList={getUserList}/>)\r\n      })}\r\n    </ListGroup>\r\n  )\r\n}\r\nexport default UsersList","C:\\Programming_school\\forum-assignment\\src\\admin\\userDetail.js",["104"],"import React, {useState, useContext} from 'react'\r\nimport { ListGroupItem, Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Label, Form, FormGroup  } from 'reactstrap';\r\nimport {checkIfModerator} from '../helpers/helpers'\r\n\r\nconst UserDetail = ({user, getUserList}) => {\r\n  const [modal, setModal] = useState(false);\r\n  const [moderatorArea_1, setModeratorArea_1] = useState(user.moderator_area_1 ? true : false)\r\n  const [moderatorArea_2, setModeratorArea_2] = useState(user.moderator_area_2 ? true : false)\r\n  const [moderatorArea_3, setModeratorArea_3] = useState(user.moderator_area_3 ? true : false)\r\n  const [moderatorArea_4, setModeratorArea_4] = useState(user.moderator_area_4 ? true : false)\r\n  let userIsModerator = checkIfModerator(user) ? true : false\r\n\r\n  const toggle = () => {\r\n    setModal(!modal)\r\n    console.log(checkIfModerator(user));\r\n  }\r\n  \r\n  const save = async () => {\r\n    let updates = Object.assign({}, user)\r\n    updates.moderator_area_1 = moderatorArea_1 ? \"General\" : null\r\n    updates.moderator_area_2 = moderatorArea_2 ? \"Gaming\" : null\r\n    updates.moderator_area_3 = moderatorArea_3 ? \"Daily\" : null\r\n    updates.moderator_area_4 = moderatorArea_4 ? \"Memes\" : null\r\n    await fetch(\"/api/users/\" + user.id,{\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(updates),\r\n    })\r\n      .then(() => getUserList())\r\n      .then(() => toggle())\r\n      .catch((error) => console.error(error))\r\n  }\r\n\r\n  return(\r\n    <ListGroupItem>\r\n    <div onClick={toggle}>\r\n      <span>Name: {user.username} </span>\r\n      <span>Role: {user.userRole} </span>\r\n    {userIsModerator ? \r\n    <Button className=\"forum-button\" >Revoke Moderator Role</Button>\r\n    : user.userRole === \"basicUser\" ? \r\n    <Button className=\"forum-button\" >Make Moderator</Button> \r\n    : null}\r\n    </div>\r\n    <Modal isOpen={modal} toggle={toggle}>\r\n      <ModalHeader className=\"mx-auto\">{user.username}</ModalHeader>\r\n      <ModalBody>\r\n        <Form>\r\n          <FormGroup className=\"mt-2\">\r\n          <Input type=\"checkbox\" checked={moderatorArea_1} onChange={() => setModeratorArea_1(!moderatorArea_1)}></Input>\r\n        <Label>\r\n        <span className=\"m-2\">Moderator - General</span>\r\n        </Label>\r\n          </FormGroup>\r\n          <FormGroup className=\"mt-2\">\r\n          <Input type=\"checkbox\"checked={moderatorArea_2} onChange={() => setModeratorArea_2(!moderatorArea_2)}></Input>\r\n        <Label>\r\n        <span className=\"m-2\">Moderator - Gaming</span>\r\n        </Label>\r\n          </FormGroup>\r\n          <FormGroup className=\"mt-2\">\r\n          <Input type=\"checkbox\" checked={moderatorArea_3} onChange={() => setModeratorArea_3(!moderatorArea_3)}></Input>\r\n        <Label>\r\n        <span className=\"m-2\">Moderator - Daily</span>\r\n        </Label>\r\n          </FormGroup>\r\n          <FormGroup className=\"mt-2\">\r\n          <Input type=\"checkbox\" checked={moderatorArea_4} onChange={() => setModeratorArea_4(!moderatorArea_4)}></Input>\r\n        <Label>\r\n        <span className=\"m-2\">Moderator - Memes</span>\r\n        </Label>\r\n          </FormGroup>\r\n          <Button className=\"forum-button col-xs-8 col-sm-12 col-md-12 col-lg-12 font-weight-bold mt-4\" onClick={() => save()}>Save</Button>\r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button className=\"forum-button\" onClick={toggle}>Close</Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  </ListGroupItem>\r\n  )\r\n}\r\nexport default UserDetail",{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":13,"column":8,"nodeType":"111","messageId":"112","endLine":13,"endColumn":18},{"ruleId":"109","severity":1,"message":"113","line":1,"column":10,"nodeType":"111","messageId":"112","endLine":1,"endColumn":16},{"ruleId":"109","severity":1,"message":"114","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":26},{"ruleId":"109","severity":1,"message":"115","line":10,"column":10,"nodeType":"111","messageId":"112","endLine":10,"endColumn":22},{"ruleId":"109","severity":1,"message":"116","line":11,"column":16,"nodeType":"111","messageId":"112","endLine":11,"endColumn":21},{"ruleId":"109","severity":1,"message":"114","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":26},{"ruleId":"109","severity":1,"message":"117","line":1,"column":38,"nodeType":"111","messageId":"112","endLine":1,"endColumn":48},{"ruleId":"109","severity":1,"message":"118","line":2,"column":45,"nodeType":"111","messageId":"112","endLine":2,"endColumn":49},{"ruleId":"109","severity":1,"message":"119","line":2,"column":58,"nodeType":"111","messageId":"112","endLine":2,"endColumn":67},{"ruleId":"109","severity":1,"message":"120","line":2,"column":69,"nodeType":"111","messageId":"112","endLine":2,"endColumn":74},{"ruleId":"109","severity":1,"message":"121","line":13,"column":21,"nodeType":"111","messageId":"112","endLine":13,"endColumn":29},{"ruleId":"122","severity":1,"message":"123","line":108,"column":4,"nodeType":"124","endLine":108,"endColumn":6,"suggestions":"125"},{"ruleId":"109","severity":1,"message":"114","line":1,"column":27,"nodeType":"111","messageId":"112","endLine":1,"endColumn":36},{"ruleId":"109","severity":1,"message":"126","line":2,"column":21,"nodeType":"111","messageId":"112","endLine":2,"endColumn":34},{"ruleId":"109","severity":1,"message":"127","line":2,"column":36,"nodeType":"111","messageId":"112","endLine":2,"endColumn":41},{"ruleId":"109","severity":1,"message":"113","line":2,"column":43,"nodeType":"111","messageId":"112","endLine":2,"endColumn":49},{"ruleId":"109","severity":1,"message":"117","line":1,"column":26,"nodeType":"111","messageId":"112","endLine":1,"endColumn":36},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'AdminPanel' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'useEffect' is defined but never used.","'selectedPost' is assigned a value but never used.","'isMod' is assigned a value but never used.","'useContext' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'setIsMod' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'commentDebounce' and 'getPostsComments'. Either include them or remove the dependency array.","ArrayExpression",["130"],"'ListGroupItem' is defined but never used.","'Badge' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},"Update the dependencies array to be: [commentDebounce, getPostsComments]",{"range":"133","text":"134"},[3738,3740],"[commentDebounce, getPostsComments]"]