[{"F:\\Skola-repo\\forum-assignment\\src\\index.js":"1","F:\\Skola-repo\\forum-assignment\\src\\App.js":"2","F:\\Skola-repo\\forum-assignment\\src\\pages\\header.js":"3","F:\\Skola-repo\\forum-assignment\\src\\pages\\home.js":"4","F:\\Skola-repo\\forum-assignment\\src\\context\\userContext.js":"5","F:\\Skola-repo\\forum-assignment\\src\\users\\loginModal.js":"6","F:\\Skola-repo\\forum-assignment\\src\\posts\\postList.js":"7","F:\\Skola-repo\\forum-assignment\\src\\posts\\postView.js":"8"},{"size":226,"mtime":1608215148274,"results":"9","hashOfConfig":"10"},{"size":860,"mtime":1608344917221,"results":"11","hashOfConfig":"10"},{"size":1907,"mtime":1608217532987,"results":"12","hashOfConfig":"10"},{"size":212,"mtime":1608344969763,"results":"13","hashOfConfig":"10"},{"size":811,"mtime":1608217532986,"results":"14","hashOfConfig":"10"},{"size":3221,"mtime":1608304955158,"results":"15","hashOfConfig":"10"},{"size":651,"mtime":1608345803725,"results":"16","hashOfConfig":"10"},{"size":310,"mtime":1608345433083,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"17pxtz1",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},"F:\\Skola-repo\\forum-assignment\\src\\index.js",[],["40","41"],"F:\\Skola-repo\\forum-assignment\\src\\App.js",[],"F:\\Skola-repo\\forum-assignment\\src\\pages\\header.js",["42","43","44","45","46"],"import React, { useState, useContext } from \"react\";\r\nimport { withRouter, useHistory } from \"react-router-dom\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarBrand,\r\n  NavItem,\r\n  NavLink,\r\n  Nav,\r\n} from \"reactstrap\";\r\n\r\nconst ForumHeader = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  const [chatModalisOpen, setChatModalIsOpen] = useState(false);\r\n  let history = useHistory();\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  const goToHomePage = () => {\r\n    history.push(\"/\");\r\n  };\r\n  const goToMyPage = () => {\r\n    history.push(\"/mypage\");\r\n  };\r\n  const toggleModal = () => {\r\n    setModalIsOpen(!modalIsOpen);\r\n  };\r\n  const toggleChatModal = () => {\r\n    setChatModalIsOpen(!modalIsOpen);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar className=\"light-grey-background mb-3\" expand=\"lg\">\r\n        <NavbarBrand className=\"text-light pointer\" onClick={goToHomePage}>\r\n          <h3 className=\"my-auto ml-1 p-2\">\r\n            Forum\r\n            <span className=\"orange-background forum-white borderRadius ml-1\">\r\n              Hub\r\n            </span>\r\n          </h3>\r\n        </NavbarBrand>\r\n\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav navbar>\r\n            <NavItem>\r\n              <NavLink className=\"forum-grey text-light pointer\" onClick={goToHomePage}>\r\n                Hem\r\n              </NavLink>\r\n            </NavItem>\r\n            <>\r\n              <NavItem className=\"forum-grey\" onClick={() => toggleModal}>\r\n                <NavLink className=\"forum-grey pointer\" onClick={toggleModal}>\r\n                  Logga in\r\n                </NavLink>\r\n              </NavItem>\r\n            </>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(ForumHeader);\r\n","F:\\Skola-repo\\forum-assignment\\src\\pages\\home.js",["47"],"import { Button } from 'reactstrap'\r\nimport React from 'react'\r\nimport PostList from '../posts/postList'\r\n\r\nconst Home = () => {\r\n\r\n  return(\r\n    <div>\r\n      <PostList/>\r\n    </div>\r\n  )\r\n}\r\nexport default Home","F:\\Skola-repo\\forum-assignment\\src\\context\\userContext.js",["48","49"],"import React, { createContext, useEffect, useState, useContext } from \"react\";\r\n\r\nexport const UserContext = createContext();\r\n\r\nconst UserContextProvider = (props) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // const fetchUser = async () => {\r\n  //   let res = await fetch(\"/api/v1/users/whoami\");\r\n  //   try {\r\n  //     if (res.ok) {\r\n  //       res = await res.json();\r\n  //       setUser(res);\r\n  //     } else {\r\n  //       console.log(\"else: \", res);\r\n  //       setUser(null);\r\n  //     }\r\n  //   } catch {}\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   fetchUser();\r\n  // }, []);\r\n\r\n  const values = {\r\n    user,\r\n    // fetchUser,\r\n    setUser,\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={values}>{props.children}</UserContext.Provider>\r\n  );\r\n};\r\nexport default UserContextProvider;\r\n","F:\\Skola-repo\\forum-assignment\\src\\users\\loginModal.js",["50","51","52"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from \"reactstrap\";\r\n\r\nconst LoginModal = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessageShown, setErrorMessageShown] = useState(false);\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  useEffect(() => {\r\n    console.log(email + \" \" + password);\r\n  },[email && password])\r\n\r\n  return (\r\n    <div>\r\n      <Button className=\"forum-button\" onClick={toggle}>\r\n        Login\r\n      </Button>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader className=\"text-center mx-auto\">Login</ModalHeader>\r\n        <ModalBody>\r\n          <Form onSubmit={() => console.log(\"hello\")}>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 m-0\">\r\n              <Label\r\n                for=\"emailAddress\"\r\n                className=\"forum-dark-grey font-weight-bold\"\r\n              >\r\n                Email\r\n              </Label>\r\n              <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input\"\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              <Label\r\n             for=\"password\"\r\n              className=\"forum-dark-grey font-weight-bold col-12 custom-password-label\"\r\n            >\r\n              Lösenord\r\n            </Label>\r\n             <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input col-10 noBorder\"\r\n                type=\"password\"\r\n                placeholder=\"Lösenord\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              {errorMessageShown ? (\r\n                <div className=\"error-text mb-2 text-center font-weight-bold\">\r\n                  Felaktigt användarnamn eller lösenord{\" \"}\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <Button className=\"forum-button col-xs-8 col-sm-12 col-md-12 col-lg-12 font-weight-bold\">\r\n                Logga in\r\n              </Button>\r\n            </FormGroup>\r\n          </Form>\r\n          <div className=\"text-center m-4\">\r\n            <p className=\"font-italic mb-0\">Har du inte ett konto?</p>\r\n            <p className=\"font-italic\">\r\n              {\" \"}\r\n              Skapa konto{\" \"}\r\n              <span className=\"text-primary click-text inline\">\r\n                <span>här</span>\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button className=\"forum-button\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginModal;\r\n","F:\\Skola-repo\\forum-assignment\\src\\posts\\postList.js",[],"F:\\Skola-repo\\forum-assignment\\src\\posts\\postView.js",["53","54","55"],"import React from 'react'\r\nimport { Card, Button, CardTitle, CardText, Row, Col } from \"reactstrap\";\r\n\r\nconst PostView = ({post}) => {\r\n\r\n  return (\r\n    <Card body>\r\n      <CardText>\r\n        Post content\r\n      </CardText>\r\n      <Button>Go somewhere</Button>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default PostView",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":27,"nodeType":"62","messageId":"63","endLine":1,"endColumn":37},{"ruleId":"60","severity":1,"message":"64","line":17,"column":10,"nodeType":"62","messageId":"63","endLine":17,"endColumn":25},{"ruleId":"60","severity":1,"message":"65","line":20,"column":9,"nodeType":"62","messageId":"63","endLine":20,"endColumn":15},{"ruleId":"60","severity":1,"message":"66","line":25,"column":9,"nodeType":"62","messageId":"63","endLine":25,"endColumn":19},{"ruleId":"60","severity":1,"message":"67","line":31,"column":9,"nodeType":"62","messageId":"63","endLine":31,"endColumn":24},{"ruleId":"60","severity":1,"message":"68","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":16},{"ruleId":"60","severity":1,"message":"69","line":1,"column":32,"nodeType":"62","messageId":"63","endLine":1,"endColumn":41},{"ruleId":"60","severity":1,"message":"61","line":1,"column":53,"nodeType":"62","messageId":"63","endLine":1,"endColumn":63},{"ruleId":"60","severity":1,"message":"70","line":7,"column":29,"nodeType":"62","messageId":"63","endLine":7,"endColumn":49},{"ruleId":"71","severity":1,"message":"72","line":14,"column":5,"nodeType":"73","endLine":14,"endColumn":24,"suggestions":"74"},{"ruleId":"71","severity":1,"message":"75","line":14,"column":6,"nodeType":"76","endLine":14,"endColumn":23},{"ruleId":"60","severity":1,"message":"77","line":2,"column":24,"nodeType":"62","messageId":"63","endLine":2,"endColumn":33},{"ruleId":"60","severity":1,"message":"78","line":2,"column":45,"nodeType":"62","messageId":"63","endLine":2,"endColumn":48},{"ruleId":"60","severity":1,"message":"79","line":2,"column":50,"nodeType":"62","messageId":"63","endLine":2,"endColumn":53},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'chatModalisOpen' is assigned a value but never used.","'toggle' is assigned a value but never used.","'goToMyPage' is assigned a value but never used.","'toggleChatModal' is assigned a value but never used.","'Button' is defined but never used.","'useEffect' is defined but never used.","'setErrorMessageShown' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'email' and 'password'. Either include them or remove the dependency array.","ArrayExpression",["82"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","LogicalExpression","'CardTitle' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [email, password]",{"range":"85","text":"86"},[517,536],"[email, password]"]