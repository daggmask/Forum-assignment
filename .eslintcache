[{"C:\\Programming_school\\forum-assignment\\src\\index.js":"1","C:\\Programming_school\\forum-assignment\\src\\App.js":"2","C:\\Programming_school\\forum-assignment\\src\\context\\userContext.js":"3","C:\\Programming_school\\forum-assignment\\src\\pages\\header.js":"4","C:\\Programming_school\\forum-assignment\\src\\pages\\home.js":"5","C:\\Programming_school\\forum-assignment\\src\\users\\loginModal.js":"6","C:\\Programming_school\\forum-assignment\\src\\posts\\postList.js":"7","C:\\Programming_school\\forum-assignment\\src\\posts\\postView.js":"8","C:\\Programming_school\\forum-assignment\\src\\posts\\postCreation.js":"9","C:\\Programming_school\\forum-assignment\\src\\context\\postContext.js":"10","C:\\Programming_school\\forum-assignment\\src\\posts\\postFilterButton.js":"11","C:\\Programming_school\\forum-assignment\\src\\users\\userCreation.js":"12","C:\\Programming_school\\forum-assignment\\src\\helpers\\helpers.js":"13","C:\\Programming_school\\forum-assignment\\src\\posts\\postPage.js":"14","C:\\Programming_school\\forum-assignment\\src\\posts\\comments.js":"15","C:\\Programming_school\\forum-assignment\\src\\posts\\commentField.js":"16","C:\\Programming_school\\forum-assignment\\src\\admin\\adminPage.js":"17","C:\\Programming_school\\forum-assignment\\src\\admin\\usersList.js":"18"},{"size":237,"mtime":1608401420880,"results":"19","hashOfConfig":"20"},{"size":994,"mtime":1609750585488,"results":"21","hashOfConfig":"20"},{"size":841,"mtime":1610028751503,"results":"22","hashOfConfig":"20"},{"size":2120,"mtime":1610031230638,"results":"23","hashOfConfig":"20"},{"size":212,"mtime":1608401420880,"results":"24","hashOfConfig":"20"},{"size":3956,"mtime":1609933812085,"results":"25","hashOfConfig":"20"},{"size":1500,"mtime":1609935472652,"results":"26","hashOfConfig":"20"},{"size":1689,"mtime":1610028895026,"results":"27","hashOfConfig":"20"},{"size":3731,"mtime":1609935790034,"results":"28","hashOfConfig":"20"},{"size":495,"mtime":1609750871334,"results":"29","hashOfConfig":"20"},{"size":929,"mtime":1609924423899,"results":"30","hashOfConfig":"20"},{"size":3494,"mtime":1609756477947,"results":"31","hashOfConfig":"20"},{"size":1935,"mtime":1610028645706,"results":"32","hashOfConfig":"20"},{"size":5106,"mtime":1609940160397,"results":"33","hashOfConfig":"20"},{"size":1060,"mtime":1609939321357,"results":"34","hashOfConfig":"20"},{"size":1065,"mtime":1609937293281,"results":"35","hashOfConfig":"20"},{"size":1579,"mtime":1610031332011,"results":"36","hashOfConfig":"20"},{"size":933,"mtime":1610031773311,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"jlut5y",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Programming_school\\forum-assignment\\src\\index.js",[],["80","81"],"C:\\Programming_school\\forum-assignment\\src\\App.js",[],"C:\\Programming_school\\forum-assignment\\src\\context\\userContext.js",[],"C:\\Programming_school\\forum-assignment\\src\\pages\\header.js",["82"],"C:\\Programming_school\\forum-assignment\\src\\pages\\home.js",["83"],"import { Button } from 'reactstrap'\r\nimport React from 'react'\r\nimport PostList from '../posts/postList'\r\n\r\nconst Home = () => {\r\n\r\n  return(\r\n    <div>\r\n      <PostList/>\r\n    </div>\r\n  )\r\n}\r\nexport default Home","C:\\Programming_school\\forum-assignment\\src\\users\\loginModal.js",["84","85"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport {UserContext} from \"../context/userContext\"\r\nimport UserCreation from './userCreation'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst LoginModal = () => {\r\n  const {user, setUser, setModeratorSubjects} = useContext(UserContext)\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessageShown, setErrorMessageShown] = useState(false);\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n  let history = useHistory();\r\n\r\n  const doLogin = async () => {\r\n    const credentials = {username: username, password: password}\r\n    await fetch(\"/api/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    })\r\n      .then((res) => res.json())\r\n      .then( async (data) => data ? setUser(data)\r\n         & setModal(false)\r\n         & setErrorMessageShown(false)\r\n         & history.push(\"/\")\r\n         : setErrorMessageShown(true))\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  const doLogout = async() => {\r\n    await fetch(\"/api/login\",{\r\n      method: \"DELETE\"\r\n    })\r\n      .then((res) => res.json())\r\n      .then(() => setUser(null))\r\n      .then(() => history.push(\"/\"))\r\n      .catch((error) => console.error(error))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {user ? \r\n      <Button className=\"forum-button\" onClick={() => doLogout()}>\r\n        Logout\r\n      </Button>\r\n      :<Button className=\"forum-button\" onClick={toggle}>\r\n      Login\r\n    </Button>}\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader className=\"text-center mx-auto\">Login</ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 m-0\">\r\n              <Label\r\n                for=\"emailAddress\"\r\n                className=\"forum-dark-grey font-weight-bold col-12\"\r\n              >\r\n                Username\r\n              </Label>\r\n              <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input\"\r\n                type=\"email\"\r\n                placeholder=\"Username...\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              <Label\r\n             for=\"password\"\r\n              className=\"forum-dark-grey font-weight-bold col-12\"\r\n            >\r\n              Password\r\n            </Label>\r\n             <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input col-10 noBorder\"\r\n                type=\"password\"\r\n                placeholder=\"Password...\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              {errorMessageShown ? (\r\n                <div className=\"error-text mb-2 text-center font-weight-bold\">\r\n                  Wrong username or password{\" \"}\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <Button className=\"forum-button col-xs-8 col-sm-12 col-md-12 col-lg-12 font-weight-bold\" onClick={() => doLogin()}>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </Form>\r\n          <UserCreation doLogin={doLogin}/>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button className=\"forum-button\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginModal;\r\n","C:\\Programming_school\\forum-assignment\\src\\posts\\postList.js",[],"C:\\Programming_school\\forum-assignment\\src\\posts\\postView.js",["86","87","88","89","90"],"C:\\Programming_school\\forum-assignment\\src\\posts\\postCreation.js",["91"],"import React, {  useState, useContext, useEffect } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport {UserContext} from \"../context/userContext\"\r\nimport {PostContext} from '../context/postContext'\r\n\r\nconst PostCreation = () => {\r\n  const {render,setRender} = useContext(PostContext)\r\n  const {user} = useContext(UserContext)\r\n  const [postTitle, setPostTitle] = useState(\"\")\r\n  const [postContent, setPostContent] = useState(\"\")\r\n  const [postSubject, setPostSubject] = useState(\"General\")\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => {\r\n    setModal(!modal)\r\n    if(!modal){\r\n      setPostTitle(\"\")\r\n      setPostContent(\"\")\r\n      setPostSubject(\"General\")\r\n    }\r\n  };\r\n\r\n  const getSubjectObject = (subject) => {\r\n    if(subject === \"General\"){\r\n      return {id: 1, subject: subject}\r\n    }\r\n    if(subject === \"Gaming\"){\r\n      return {id: 2, subject: subject}\r\n    }\r\n    if(subject === \"Daily\"){\r\n      return {id: 3, subject: subject}\r\n    }\r\n    if(subject === \"Memes\"){\r\n      return {id: 4, subject: subject}\r\n    }\r\n  }\r\n\r\n  const createPost = async () => {\r\n    let subject = getSubjectObject(postSubject)\r\n    let post = {creatorId: user.id, title:postTitle, content: postContent, subject: subject.subject,subjectId: subject.id , timePosted: new Date().getTime()}\r\n\r\n    await fetch(\"/api/posts\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(post),\r\n    })\r\n    .then((res) => res.json())\r\n    .then(() => setModal(false))\r\n    .catch((error) => console.error(error));\r\n\r\n    //Trigger render on posts\r\n    setRender(!render)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div> \r\n         <div>\r\n      {user ? \r\n      <Button className=\"forum-button\" onClick={toggle}>\r\n        Create post\r\n      </Button>\r\n      : null}\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader className=\"text-center mx-auto\">Create a post</ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n          <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n            <Label for=\"postTitle\">Title</Label>\r\n            <Input placeholder=\"Title...\" onChange={((e) => setPostTitle(e.target.value))} id=\"postTitle\" />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n            <Label for=\"postContent\">Content</Label>\r\n            <Input type=\"textarea\" placeholder=\"Enter content...\" onChange={((e) => setPostContent(e.target.value))} id=\"postContent\" />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              <Label\r\n             for=\"Subject\" className=\"forum-dark-grey font-weight-bold col-12 custom-password-label\">\r\n              Subject\r\n             <Input type=\"select\" onChange={((e) => setPostSubject(e.target.value))}>\r\n               <option>General</option>\r\n               <option>Gaming</option>\r\n               <option>Daily</option>\r\n               <option>Memes</option>\r\n             </Input>\r\n            </Label>\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              <Button className=\"forum-button col-xs-8 col-sm-12 col-md-12 col-lg-12 font-weight-bold\" onClick={() => createPost()}>\r\n                Post\r\n              </Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button className=\"forum-button\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostCreation","C:\\Programming_school\\forum-assignment\\src\\context\\postContext.js",[],"C:\\Programming_school\\forum-assignment\\src\\posts\\postFilterButton.js",[],"C:\\Programming_school\\forum-assignment\\src\\users\\userCreation.js",["92","93"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from \"reactstrap\";\r\n\r\nconst UserCreation = ({doLogin}) => {\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessageShown, setErrorMessageShown] = useState(false);\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const registerUser = async () => {\r\n    const credentials = {username: username, password: password, userRole: \"basicUser\"}\r\n    await fetch(\"/api/users\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    })\r\n      .then((res) => res.json()\r\n        & setModal(false)\r\n        & setErrorMessageShown(false)\r\n        & doLogin())\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <div className=\"text-center m-4\" onClick={toggle}>\r\n        <p className=\"font-italic mb-0\">Don't have an account?</p>\r\n        <p className=\"font-italic\">\r\n          {\" \"}\r\n          Register{\" \"}\r\n          <span className=\"text-primary click-text inline\">\r\n            <span>here</span>\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader className=\"text-center mx-auto\">Register</ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 m-0\">\r\n              <Label\r\n                for=\"emailAddress\"\r\n                className=\"forum-dark-grey font-weight-bold col-12\"\r\n              >\r\n                Username\r\n              </Label>\r\n              <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input\"\r\n                type=\"text\"\r\n                placeholder=\"Username...\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              <Label\r\n             for=\"password\"\r\n              className=\"forum-dark-grey font-weight-bold col-12\"\r\n            >\r\n              Lösenord\r\n            </Label>\r\n             <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input col-10 noBorder\"\r\n                type=\"password\"\r\n                placeholder=\"Password...\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              {errorMessageShown ? (\r\n                <div className=\"error-text mb-2 text-center font-weight-bold\">\r\n                  Invalid username or password{\" \"}\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <Button className=\"forum-button col-xs-8 col-sm-12 col-md-12 col-lg-12 font-weight-bold\" onClick={() => registerUser()}>\r\n                Register\r\n              </Button>\r\n            </FormGroup>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button className=\"forum-button\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default UserCreation","C:\\Programming_school\\forum-assignment\\src\\helpers\\helpers.js",[],"C:\\Programming_school\\forum-assignment\\src\\posts\\postPage.js",["94","95","96","97","98"],"import React, { useEffect, useState, useContext } from 'react'\r\nimport { Card, Button, CardTitle, CardText, Form, Input, FormGroup, Label } from 'reactstrap';\r\nimport {PostContext} from '../context/postContext'\r\nimport {UserContext} from \"../context/userContext\"\r\nimport {getDatePosted, DebounceHelper, checkModeratorRole} from '../helpers/helpers'\r\nimport {useHistory } from \"react-router-dom\";\r\nimport Comments from './comments'\r\nimport CommentField from './commentField'\r\n\r\nconst PostPage = () => {\r\n\r\nconst {selectedPost, setSelectedPost} = useContext(PostContext)\r\nconst {user, moderatorSubjects} = useContext(UserContext)\r\n\r\nconst [commentPost, setCommentPost] = useState(\"\")\r\nconst [comments, setComments] = useState([])\r\nconst [editPressed, setEditPressed] = useState(false)\r\nconst [postTitle, setPostTitle] = useState(selectedPost.title)\r\nconst [postContent, setPostContent] = useState(selectedPost.content)\r\nconst [lockedStatus, setLockedStatus] = useState(!!selectedPost.isLocked)\r\nlet commentDebounce = new DebounceHelper()\r\n\r\nlet condition = user ? selectedPost.creatorId === user.id : false\r\nlet history = useHistory();\r\n\r\n// eslint-disable-next-line no-mixed-operators\r\nconst [moderatorButtonCondition, setModeratorButtonCondition] = useState(condition || checkModeratorRole(moderatorSubjects, user))\r\n\r\n\r\nconst saveChanges = async () => {\r\n  let updatedPost = Object.assign({},selectedPost)\r\n  updatedPost.title = postTitle\r\n  updatedPost.content = postContent\r\n  setSelectedPost(updatedPost)\r\n\r\n  await fetch(\"/api/posts/\" + selectedPost.id, {\r\n    method: \"PUT\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(updatedPost),\r\n  })\r\n  .then((res) => res.json())\r\n  .then(() => setEditPressed(false))\r\n  .catch((error) => console.error(error));\r\n}\r\n\r\nconst getPostsComments = async () => {\r\n  await fetch(\"/api/comments/\" + selectedPost.id)\r\n    .then((res) => res.json())\r\n    .then((data) => setComments(data) & setCommentPost(\"\"))\r\n    .catch((error) => console.error(error))\r\n}\r\n\r\nconst postComment = async () => {\r\n  let commentCredentials = {post: selectedPost.id, user: user.username, userId: user.id, content: commentPost, timePosted: new Date().getTime()}\r\n  await fetch(\"/api/comments\",{\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(commentCredentials),\r\n  })\r\n  .then((res) => res.json())\r\n  .then(() => commentDebounce.debounceHelper(getPostsComments))\r\n  .catch((error) => console.error(error))\r\n}\r\n\r\nconst deletePost = async () => {\r\n  await fetch(\"/api/posts/\" + selectedPost.id, {\r\n    method: \"DELETE\"\r\n  })\r\n    .then(() => history.push(\"/\"))\r\n    .catch((error) => console.error(error))\r\n}\r\n\r\nconst lockPost = async () => {\r\n  let updatedPost = Object.assign({},selectedPost)\r\n  updatedPost.isLocked = !lockedStatus\r\n  setLockedStatus(updatedPost.isLocked)\r\n  updatedPost.isLocked = updatedPost.isLocked ? 1 : 0\r\n  setSelectedPost(updatedPost)\r\n\r\n  await fetch(\"/api/posts/\" + selectedPost.id, {\r\n    method: \"PUT\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(updatedPost),\r\n  })\r\n  .then((res) => res.json())\r\n  .catch((error) => console.error(error));\r\n}\r\n\r\nuseEffect(() => {\r\n  commentDebounce.debounceHelper(getPostsComments)\r\n  return () => {\r\n    setCommentPost(\"\")\r\n    setComments([])\r\n  }\r\n}, [])\r\n\r\n  return(\r\n    <div>\r\n        <Card body className=\"orange-background\">\r\n          <CardTitle className=\"mx-auto\"><h4>\r\n            {editPressed ? <Input value={postTitle} onChange={(e) => setPostTitle(e.target.value)}></Input>: postTitle}</h4>\r\n        </CardTitle>\r\n          <CardTitle className=\"mx-auto\"><h6>Posted: {getDatePosted(selectedPost.timePosted)}</h6></CardTitle>\r\n        <CardText className=\"mx-auto\"> \r\n        {editPressed ?<Input type=\"textarea\" value={postContent} onChange={(e) => setPostContent(e.target.value)}></Input>: postContent}\r\n          </CardText>\r\n        {editPressed ? <Button className=\"forum-button-dark m-2 col-4 mx-auto\" onClick={() => saveChanges()}>Save</Button> : null}\r\n        {condition ?<Button className=\" m-2 col-4 mx-auto\" onClick={() => setEditPressed(!editPressed)}>Edit</Button>: null}\r\n        {moderatorButtonCondition ? \r\n        <div className=\"mx-auto\">\r\n          <div>\r\n          <Button className=\"forum-button-dark m-2 col-12\" onClick={() => deletePost()}>Remove</Button>\r\n          </div>\r\n          {user ? user.userRole === \"moderator\" || user.userRole === \"admin\" ? \r\n          <div>\r\n          <Button className=\"forum-button-dark m-2 col-12\" onClick={() => lockPost()}>{lockedStatus ? \"unlock post\" : \"lock post\"}</Button>\r\n          </div> : null : null}\r\n        </div>\r\n         : null}\r\n        </Card>\r\n        <div className=\"container\">\r\n          <CommentField commentPost={commentPost} setCommentPost={setCommentPost} postComment={postComment} locked={lockedStatus} user={user}/>\r\n        </div> \r\n        <Comments comments={comments} checkModeratorRole={checkModeratorRole} moderatorSubjects={moderatorSubjects}/>\r\n    </div>\r\n  )\r\n} \r\nexport default PostPage","C:\\Programming_school\\forum-assignment\\src\\posts\\comments.js",[],"C:\\Programming_school\\forum-assignment\\src\\posts\\commentField.js",[],"C:\\Programming_school\\forum-assignment\\src\\admin\\adminPage.js",["99"],"C:\\Programming_school\\forum-assignment\\src\\admin\\usersList.js",["100"],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":13,"column":8,"nodeType":"107","messageId":"108","endLine":13,"endColumn":18},{"ruleId":"105","severity":1,"message":"109","line":1,"column":10,"nodeType":"107","messageId":"108","endLine":1,"endColumn":16},{"ruleId":"105","severity":1,"message":"110","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"111","line":8,"column":25,"nodeType":"107","messageId":"108","endLine":8,"endColumn":45},{"ruleId":"105","severity":1,"message":"112","line":5,"column":24,"nodeType":"107","messageId":"108","endLine":5,"endColumn":42},{"ruleId":"105","severity":1,"message":"113","line":5,"column":44,"nodeType":"107","messageId":"108","endLine":5,"endColumn":58},{"ruleId":"105","severity":1,"message":"114","line":5,"column":60,"nodeType":"107","messageId":"108","endLine":5,"endColumn":72},{"ruleId":"105","severity":1,"message":"115","line":9,"column":10,"nodeType":"107","messageId":"108","endLine":9,"endColumn":22},{"ruleId":"105","severity":1,"message":"116","line":10,"column":10,"nodeType":"107","messageId":"108","endLine":10,"endColumn":14},{"ruleId":"105","severity":1,"message":"110","line":1,"column":40,"nodeType":"107","messageId":"108","endLine":1,"endColumn":49},{"ruleId":"105","severity":1,"message":"110","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"117","line":1,"column":38,"nodeType":"107","messageId":"108","endLine":1,"endColumn":48},{"ruleId":"105","severity":1,"message":"118","line":2,"column":45,"nodeType":"107","messageId":"108","endLine":2,"endColumn":49},{"ruleId":"105","severity":1,"message":"119","line":2,"column":58,"nodeType":"107","messageId":"108","endLine":2,"endColumn":67},{"ruleId":"105","severity":1,"message":"120","line":2,"column":69,"nodeType":"107","messageId":"108","endLine":2,"endColumn":74},{"ruleId":"105","severity":1,"message":"121","line":27,"column":34,"nodeType":"107","messageId":"108","endLine":27,"endColumn":61},{"ruleId":"122","severity":1,"message":"123","line":95,"column":4,"nodeType":"124","endLine":95,"endColumn":6,"suggestions":"125"},{"ruleId":"105","severity":1,"message":"110","line":1,"column":27,"nodeType":"107","messageId":"108","endLine":1,"endColumn":36},{"ruleId":"105","severity":1,"message":"126","line":2,"column":36,"nodeType":"107","messageId":"108","endLine":2,"endColumn":41},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'AdminPanel' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'useEffect' is defined but never used.","'setModeratorSubjects' is assigned a value but never used.","'checkModeratorRole' is defined but never used.","'checkModerator' is defined but never used.","'checkCreator' is defined but never used.","'selectedPost' is assigned a value but never used.","'user' is assigned a value but never used.","'useContext' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'setModeratorButtonCondition' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'commentDebounce' and 'getPostsComments'. Either include them or remove the dependency array.","ArrayExpression",["129"],"'Badge' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},"Update the dependencies array to be: [commentDebounce, getPostsComments]",{"range":"132","text":"133"},[3361,3363],"[commentDebounce, getPostsComments]"]