[{"C:\\Programming_school\\forum-assignment\\src\\index.js":"1","C:\\Programming_school\\forum-assignment\\src\\App.js":"2","C:\\Programming_school\\forum-assignment\\src\\context\\userContext.js":"3","C:\\Programming_school\\forum-assignment\\src\\pages\\header.js":"4","C:\\Programming_school\\forum-assignment\\src\\pages\\home.js":"5","C:\\Programming_school\\forum-assignment\\src\\users\\loginModal.js":"6","C:\\Programming_school\\forum-assignment\\src\\posts\\postList.js":"7","C:\\Programming_school\\forum-assignment\\src\\posts\\postView.js":"8","C:\\Programming_school\\forum-assignment\\src\\posts\\postCreation.js":"9","C:\\Programming_school\\forum-assignment\\src\\context\\postContext.js":"10","C:\\Programming_school\\forum-assignment\\src\\posts\\postFilterButton.js":"11","C:\\Programming_school\\forum-assignment\\src\\users\\userCreation.js":"12"},{"size":237,"mtime":1608401420880,"results":"13","hashOfConfig":"14"},{"size":859,"mtime":1609347066849,"results":"15","hashOfConfig":"14"},{"size":405,"mtime":1609352409098,"results":"16","hashOfConfig":"14"},{"size":1775,"mtime":1609748666684,"results":"17","hashOfConfig":"14"},{"size":212,"mtime":1608401420880,"results":"18","hashOfConfig":"14"},{"size":3798,"mtime":1609748528829,"results":"19","hashOfConfig":"14"},{"size":1299,"mtime":1609348515703,"results":"20","hashOfConfig":"14"},{"size":3050,"mtime":1609749348601,"results":"21","hashOfConfig":"14"},{"size":3307,"mtime":1609748868028,"results":"22","hashOfConfig":"14"},{"size":396,"mtime":1609352409098,"results":"23","hashOfConfig":"14"},{"size":938,"mtime":1609348072960,"results":"24","hashOfConfig":"14"},{"size":3471,"mtime":1609748559126,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"jlut5y",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"C:\\Programming_school\\forum-assignment\\src\\index.js",[],["55","56"],"C:\\Programming_school\\forum-assignment\\src\\App.js",[],"C:\\Programming_school\\forum-assignment\\src\\context\\userContext.js",["57"],"import React, { createContext, useState} from \"react\";\r\n\r\nexport const UserContext = createContext();\r\n\r\nconst UserContextProvider = (props) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const values = {\r\n    user,\r\n    // fetchUser,\r\n    setUser,\r\n  };\r\n\r\n  return (\r\n    <UserContext.Provider value={values}>{props.children}</UserContext.Provider>\r\n  );\r\n};\r\nexport default UserContextProvider;\r\n","C:\\Programming_school\\forum-assignment\\src\\pages\\header.js",["58"],"C:\\Programming_school\\forum-assignment\\src\\pages\\home.js",["59"],"import { Button } from 'reactstrap'\r\nimport React from 'react'\r\nimport PostList from '../posts/postList'\r\n\r\nconst Home = () => {\r\n\r\n  return(\r\n    <div>\r\n      <PostList/>\r\n    </div>\r\n  )\r\n}\r\nexport default Home","C:\\Programming_school\\forum-assignment\\src\\users\\loginModal.js",["60"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport {UserContext} from \"../context/userContext\"\r\nimport UserCreation from './userCreation'\r\n\r\nconst LoginModal = () => {\r\n  const {user,setUser} = useContext(UserContext)\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessageShown, setErrorMessageShown] = useState(false);\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const doLogin = async () => {\r\n    const credentials = {email: email, password: password}\r\n    await fetch(\"/api/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => data ? setUser(data)\r\n         & setModal(false)\r\n         & setErrorMessageShown(false) \r\n         : setErrorMessageShown(true))\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  const doLogout = async() => {\r\n    await fetch(\"/api/login\",{\r\n      method: \"DELETE\"\r\n    })\r\n      .then((res) => res.json())\r\n      .then(() => setUser(null))\r\n      .then((data) => console.log(data))\r\n      .catch((error) => console.error(error))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {user ? \r\n      <Button className=\"forum-button\" onClick={() => doLogout()}>\r\n        Logout\r\n      </Button>\r\n      :<Button className=\"forum-button\" onClick={toggle}>\r\n      Login\r\n    </Button>}\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader className=\"text-center mx-auto\">Login</ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 m-0\">\r\n              <Label\r\n                for=\"emailAddress\"\r\n                className=\"forum-dark-grey font-weight-bold col-12\"\r\n              >\r\n                Email\r\n              </Label>\r\n              <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input\"\r\n                type=\"email\"\r\n                placeholder=\"Email...\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              <Label\r\n             for=\"password\"\r\n              className=\"forum-dark-grey font-weight-bold col-12\"\r\n            >\r\n              Password\r\n            </Label>\r\n             <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input col-10 noBorder\"\r\n                type=\"password\"\r\n                placeholder=\"Password...\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              {errorMessageShown ? (\r\n                <div className=\"error-text mb-2 text-center font-weight-bold\">\r\n                  Wrong username or password{\" \"}\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <Button className=\"forum-button col-xs-8 col-sm-12 col-md-12 col-lg-12 font-weight-bold\" onClick={() => doLogin()}>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </Form>\r\n          <UserCreation doLogin={doLogin}/>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button className=\"forum-button\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginModal;\r\n","C:\\Programming_school\\forum-assignment\\src\\posts\\postList.js",[],"C:\\Programming_school\\forum-assignment\\src\\posts\\postView.js",[],"C:\\Programming_school\\forum-assignment\\src\\posts\\postCreation.js",[],"C:\\Programming_school\\forum-assignment\\src\\context\\postContext.js",[],"C:\\Programming_school\\forum-assignment\\src\\posts\\postFilterButton.js",[],"C:\\Programming_school\\forum-assignment\\src\\users\\userCreation.js",["61","62"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from \"reactstrap\";\r\n\r\nconst UserCreation = ({doLogin}) => {\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessageShown, setErrorMessageShown] = useState(false);\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const registerUser = async () => {\r\n    const credentials = {email: email, password: password, userRole: \"basicUser\"}\r\n    await fetch(\"/api/users\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    })\r\n      .then((res) => res.json()\r\n        & setModal(false)\r\n        & setErrorMessageShown(false)\r\n        & doLogin())\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <div className=\"text-center m-4\" onClick={toggle}>\r\n        <p className=\"font-italic mb-0\">Don't have an account?</p>\r\n        <p className=\"font-italic\">\r\n          {\" \"}\r\n          Register{\" \"}\r\n          <span className=\"text-primary click-text inline\">\r\n            <span>here</span>\r\n          </span>\r\n        </p>\r\n      </div>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader className=\"text-center mx-auto\">Register</ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 m-0\">\r\n              <Label\r\n                for=\"emailAddress\"\r\n                className=\"forum-dark-grey font-weight-bold col-12\"\r\n              >\r\n                Email\r\n              </Label>\r\n              <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input\"\r\n                type=\"email\"\r\n                placeholder=\"Email...\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              <Label\r\n             for=\"password\"\r\n              className=\"forum-dark-grey font-weight-bold col-12\"\r\n            >\r\n              Lösenord\r\n            </Label>\r\n             <Input\r\n                required\r\n                className=\"light-light-grey-background forum-input col-10 noBorder\"\r\n                type=\"password\"\r\n                placeholder=\"Password...\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n              {errorMessageShown ? (\r\n                <div className=\"error-text mb-2 text-center font-weight-bold\">\r\n                  Invalid username or password{\" \"}\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <Button className=\"forum-button col-xs-8 col-sm-12 col-md-12 col-lg-12 font-weight-bold\" onClick={() => registerUser()}>\r\n                Register\r\n              </Button>\r\n            </FormGroup>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button className=\"forum-button\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default UserCreation",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":53,"nodeType":"69","messageId":"70","endLine":1,"endColumn":63},{"ruleId":"67","severity":1,"message":"71","line":23,"column":9,"nodeType":"69","messageId":"70","endLine":23,"endColumn":19},{"ruleId":"67","severity":1,"message":"72","line":1,"column":10,"nodeType":"69","messageId":"70","endLine":1,"endColumn":16},{"ruleId":"67","severity":1,"message":"73","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":26},{"ruleId":"67","severity":1,"message":"73","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":26},{"ruleId":"67","severity":1,"message":"68","line":1,"column":38,"nodeType":"69","messageId":"70","endLine":1,"endColumn":48},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'goToMyPage' is assigned a value but never used.","'Button' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]